<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<resultMap type="member" id="memberResultset">
		<result column="USER_NO" property="userNo"/>
		<result column="USER_TYPE" property="userType"/>
		<result column="USER_ID" property="userId"/>
		<result column="PASSWORD" property="userPwd"/>
		<result column="USER_NAME" property="userName"/>
		<result column="EMAIL" property="email"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>
		<result column="GENDER" property="gender"/>
		<result column="BIRTH" property="birth"/>
		<result column="POINT" property="point"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	<resultMap type="seller" id="sellerResultset">
		<result column="USER_NO" property="userNo"/>
		<result column="SELLER_NAME" property="sellerName"/>
		<result column="SELLER_BRN" property="sellerBRN"/>
		<result column="SELLER_PHONE" property="sellerPhone"/>
		<result column="SELLER_LOCATION" property="sellerLocation"/>
		<result column="SELLER_INTRO" property="sellerIntro"/>
		<result column="SELLER_IMAGE" property="sellerImage"/>
		<result column="SELLER_IMAGEPATH" property="sellerImagePath"/>
		<result column="STATUS" property="sellerStatus"/>
	</resultMap>
	
	<resultMap type="com.sbs.wemasal.member.model.vo.admin" id="adminResultset">
		<collection property="member" resultMap="memberResultset"/>
		<collection property="seller" resultMap="sellerResultset"/>
	</resultMap>
	
	
	<!-- 로그인 -->
	<select id="loginMember" resultMap="memberResultset" parameterType="member">
		SELECT USER_NO, USER_TYPE, USER_ID, PASSWORD, USER_NAME, EMAIL, PHONE, ADDRESS, GENDER, BIRTH, POINT, STATUS
		FROM MEMBER
		WHERE USER_ID = #{userId}
		AND STATUS = 'Y'
	</select>
	
	<!-- 일반회원 가입용 쿼리문 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO 
			 MEMBER
				   (USER_NO, USER_TYPE, USER_ID, PASSWORD, USER_NAME, EMAIL, PHONE, ADDRESS, GENDER, BIRTH)
			 VALUES
			 	   (SEQ_MNO.nextval, 1, #{userId}, #{userPwd}, #{userName}, #{email}, #{phone}, #{address}, #{gender}, #{birth})
	</insert>
	<!-- 아이디 중복체크 -->
	<select id="idCheck" resultType="_int">
		 SELECT COUNT(*)
		 FROM MEMBER
		 WHERE USER_ID = #{checkId}
	</select>
	
	

	<!-- 상호 중복체크 -->
	<select id="checkName" resultType="_int">
		 SELECT COUNT(*)
		 FROM SELLER
		 WHERE SELLER_NAME = #{sellerName}
	</select>
	
	<!-- 판매자 회원가입  -->
	<insert id="insertSeller1" parameterType="member">
		INSERT INTO 
			 MEMBER
				   (USER_NO, USER_TYPE, USER_ID, PASSWORD, USER_NAME, EMAIL, PHONE, ADDRESS, GENDER, BIRTH)
			 VALUES
			 	   (SEQ_MNO.nextval, 2, #{userId}, #{userPwd}, #{userName}, #{email}, #{phone}, #{address}, #{gender}, #{birth})
	</insert>
	
	<!-- 판매자 회원가입2  -->
	<insert id="insertSeller2" parameterType="seller">
		INSERT INTO 
			 SELLER
				   (USER_NO, SELLER_NAME, SELLER_BRN, SELLER_PHONE, SELLER_LOCATION, SELLER_INTRO, SELLER_IMAGE , SELLER_IMAGEPATH)
			 VALUES
			 	   (SEQ_MNO.currval, #{sellerName}, #{sellerBRN}, #{sellerPhone}, #{sellerLocation}, #{sellerIntro}, #{sellerImage}, #{sellerImagePath})
	</insert>
	
	<!-- 일반회원 정보 수정 -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBER
		   SET 
		       USER_NAME =  #{userName},
		       EMAIL = #{email},
		       PHONE = #{phone},
		       ADDRESS = #{address},
		       GENDER = #{gender}
		 WHERE USER_ID = #{userId}    
	</update>
	
	<!-- 일반회원 탈퇴 -->
	<update id="deleteMember" parameterType="string">
		 UPDATE MEMBER
		 	SET STATUS = 'N'
		  WHERE USER_ID = #{userId}
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="findId" parameterType="String" resultType="String">
		SELECT USER_ID
		  FROM MEMBER
		 WHERE USER_NAME = #{userName}
  		   AND EMAIL = #{email}
   		   AND STATUS = 'Y'  
	</select>
	
	<!-- 판매자 리스트 -->
	<select id="sellerList" resultType="seller">
		SELECT *
		  FROM SELLER
		  
	</select>
	
	<select id="selectListCount" resultType="_int">
		select count(*)
		  from member
		 where status = 'Y'
	</select>
	
	<select id="selectList" resultMap="sellerResultset">
		select USER_NO, SELLER_NAME, SELLER_BRN, SELLER_PHONE,STATUS
		  from seller
		 order by USER_NO desc
	</select>
	
	<!-- 이메일인증 1차 -->
	
	<insert id="regist" parameterType="cert">
		INSERT INTO CERT(IP_INFO,VERI_CODE, CERT_TIME) 
		VALUES(#{ipInfo}, #{veriCode}, sysdate)
	</insert>

	<select id="emailValidate" resultType="_int"
		parameterType="cert">
		SELECT count(*) FROM CERT
		WHERE
		IP_INFO = #{ipInfo}
		and VERI_CODE = #{veriCode}
		and CERT_TIME between sysdate - 3/24/60 and sysdate
		<!-- and sysdate / 24 / 60 - when / 24 / 60 <= 3 -->
		<!-- 현재시각 - 생성시간 <= 3분 -->
	</select>

	<delete id="emailValidateRemove" parameterType="cert">
		DELETE CERT WHERE
		IP_INFO = #{ipInfo} and VERI_CODE = #{veriCode}
	</delete>

	<select id="emailDuplicationCheck" resultType="_int"
		parameterType="string">
		select count(*) as email
		from member
		where
		email=#{email}
	</select>
	
	<select id="idDuplicationCheck" resultType="_int"
		parameterType="string">
		select count(*) as USER_ID
		from member
		where
		USER_ID=#{userId}
	</select>
	
	
	<!-- 판매자 승인 상세보기 -->
	<select id="selectSeller" resultMap="sellerResultset">
		select 
			  USER_NO, SELLER_NAME, SELLER_BRN, SELLER_PHONE, SELLER_LOCATION, SELLER_INTRO, SELLER_IMAGE , SELLER_IMAGEPATH
	      from
	           seller 
	     where
	           USER_NO = #{userNo}
	</select>
	
	<select id="sellerUserName" resultType="String">
			select USER_NAME
			from member
			where USER_NO = #{userNo}
	</select>
	
	
	<!-- 판매자 승인버튼 -->
	<update id="approveSeller" parameterType="string">
		 UPDATE SELLER
		 	SET STATUS = 'Y'
		  WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 판매자 거절버튼 -->
	<update id="refuseSeller" parameterType="string">
		 UPDATE SELLER
		 	SET STATUS = 'N'
		  WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 판매자 리스트 
	
		select USER_NO, SELLER_NAME, SELLER_BRN, SELLER_PHONE
		  from seller 
		 order by USER_NO desc
	-->
	<!-- 관리자 판매자 리스트 -->
	<select id="memberSellerList" resultMap="adminResultset">
		select s.USER_NO, s.SELLER_NAME, s.SELLER_BRN, s.SELLER_PHONE, m.USER_NAME, m.USER_ID
		from seller s,member m
		where m.user_no = s.user_no
		and m.status ='Y'
		order by USER_NO desc
	</select>
	
	<!-- 관리자 판매자 상세조회 -->
	<select id="adminSelectSeller" resultMap="adminResultset">
		select s.USER_NO, s.SELLER_NAME, s.SELLER_BRN, s.SELLER_PHONE, s.SELLER_LOCATION, s.SELLER_INTRO, s.SELLER_IMAGEPATH,
			   m.USER_NAME, m.USER_ID, m.EMAIL, m.PHONE
		from seller s,member m
		where m.user_no = s.user_no
		and m.user_no = #{userNo}
	</select>
	
	<!-- 관리자 판매자멤버 탈퇴시키기 -->
	<update id="adminMemberDelete" parameterType="string">
		 UPDATE MEMBER
		 	SET STATUS = 'N'
		  WHERE USER_ID = #{userId}
	</update>
	
	<!-- 관리자 일반회원 리스트 조회 -->
	<select id="memberBuyerList" resultMap="memberResultset">
		SELECT USER_NO, USER_ID, USER_NAME, EMAIL, PHONE, POINT
		  FROM MEMBER
		 WHERE STATUS = 'Y'
		   and 
	           USER_TYPE = 1
	</select>
	
	<!-- 관리자 일반회원 관리 상세조회 -->
	<select id="adminSelectBuyer" resultMap="memberResultset">
		select *
	      from member
	     where USER_NO = #{userNo}
	</select>
	
	<!-- 관리자 일반회원 탈퇴시키기 -->
	<update id="adminDeleteBuyer" parameterType="string">
		 UPDATE MEMBER
		 	SET STATUS = 'N'
		  WHERE USER_ID = #{userId}
	</update>
	<!-- 이메일 인증 수정 2차 -->
	<!--  	
	<update id="updatePwdd" parameterType="HashMap">
		UPDATE MEMBER
		SET USER_PWD = #{secret}
		WHERE USER_ID = #{userId}
	</update>
	-->
	
	<!-- 이메일 인증 수정 3차 -->
	<!-- updatePassword -->
	<!-- 비밀번호 찾기 (조건1 일치하는 정보가 있는지 확인)-->
	<select id="searchPwd" parameterType="member" resultType="_int">
		SELECT COUNT(*)
		FROM	MEMBER
		WHERE	USER_ID=#{userId}
		AND		EMAIL=#{email}
	</select>
	<!-- 비밀번호 찾기 임시비밀번호로 수정하기-->
	<update id="updatePwd" parameterType="hashMap">
		UPDATE  MEMBER
		SET		PASSWORD=#{encPwd}
		WHERE	USER_ID=#{m.userId}		
		AND		EMAIL=#{m.email}
	</update>
	
	
</mapper>
